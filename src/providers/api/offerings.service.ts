/**
 * Savood
 * denn nur lebendiges food tut gut
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams }               from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';


import { BASE_PATH }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';
import {Offering} from "../../models/offering";
import {Chat} from "../../models/chat";
import {SuccessObject} from "../../models/successObject";
import {env} from '../../environment/environment';
import {Location} from "../../models/location";
import {OfferingLocation} from "../../models/offeringLocation";

@Injectable()
export class OfferingsService {

  protected basePath = env.api_endpoint;
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (let consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Add a new offering
   *
   * @param body Offering that needs to be added
   */
  public createNewOffering(body: Offering): Observable<Offering> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createNewOffering.');
    }

    let headers = this.defaultHeaders;


    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];
    let httpContentTypeSelected:string = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<any>(`${this.basePath}/offerings`,
      body,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Delete an offering
   *
   * @param id
   */
  public deleteOfferingById(id: string): Observable<{}> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deleteOfferingById.');
    }

    let headers = this.defaultHeaders;


    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
    ];

    return this.httpClient.delete<any>(`${this.basePath}/offerings/${encodeURIComponent(String(id))}`,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Display a user
   *
   * @param id
   */
  public getAllChatsForOffering(id: string): Observable<Array<Chat>> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getAllChatsForOffering.');
    }

    let headers = this.defaultHeaders;


    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
    ];

    return this.httpClient.get<any>(`${this.basePath}/offerings/${encodeURIComponent(String(id))}/chats`,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Display a feed of nearby feed
   *
   * @param lat Latitude
   * @param lon Longitude
   * @param distance Distance in Meters
   */
  public getFeed(lat: number, lon: number, distance: number): Observable<any> {
    if (lat === null || lat === undefined) {
      throw new Error('Required parameter lat was null or undefined when calling getFeed.');
    }
    if (lon === null || lon === undefined) {
      throw new Error('Required parameter lon was null or undefined when calling getFeed.');
    }
    if (distance === null || distance === undefined) {
      throw new Error('Required parameter distanceString was null or undefined when calling getFeed.');
    }

    console.log("Feddie");

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (lat !== undefined) {
      queryParameters = queryParameters.set('lat', <any>lat);
    }
    if (lon !== undefined) {
      queryParameters = queryParameters.set('lon', <any>lon);
    }
    if (distance !== undefined) {
      queryParameters = queryParameters.set('distance', <any>distance);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    return this.httpClient.get<any>(`${this.basePath}/feed`,
      {
        params: queryParameters,
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Display an offering
   *
   * @param id
   */
  public getOfferingById(id: string): Observable<Offering> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getOfferingById.');
    }

    let headers = this.defaultHeaders;


    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
    ];

    return this.httpClient.get<any>(`${this.basePath}/offerings/${encodeURIComponent(String(id))}`,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Display a feed of nearby feed
   *
   * @param filter Filteres feed by owned or requested
   */
  public getOfferings(filter?: string): Observable<Array<Offering>> {

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (filter !== undefined) {
      queryParameters = queryParameters.set('filter', <any>filter);
    }

    let headers = this.defaultHeaders;


    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
    ];

    return this.httpClient.get<any>(`${this.basePath}/offerings`,
      {
        params: queryParameters,
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Gets the avatar image.
   *
   * @param id
   * @param height If either width or height is set to 0, it will be set to an aspect ratio preserving value.
   * @param width If either width or height is set to 0, it will be set to an aspect ratio preserving value.
   */
  public offeringsIdImageJpegGet(id: string, height?: number, width?: number): Observable<Blob> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling offeringsIdImageJpegGet.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (height !== undefined) {
      queryParameters = queryParameters.set('height', <any>height);
    }
    if (width !== undefined) {
      queryParameters = queryParameters.set('width', <any>width);
    }

    let headers = this.defaultHeaders;


    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'image/jpeg',
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
    ];

    return this.httpClient.get(`${this.basePath}/offerings/${encodeURIComponent(String(id))}/image.jpeg`,
      {
        params: queryParameters,
        headers: headers,
        responseType: "blob",
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Uploads avatar image.
   *
   * @param id
   * @param upfile The file to upload.
   */
  public offeringsIdImageJpegPost(id: string, upfile?: Blob): Observable<{}> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling offeringsIdImageJpegPost.');
    }

    let headers = this.defaultHeaders;


    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'multipart/form-data'
    ];

    const canConsumeForm = this.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): void; };
    let useForm = false;
    let convertFormParamsToString = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    }

    if (upfile !== undefined) {
      formParams = formParams.append('upfile', <any>upfile) || formParams;
    }

    return this.httpClient.post<any>(`${this.basePath}/offerings/${encodeURIComponent(String(id))}/image.jpeg`,
      convertFormParamsToString ? formParams.toString() : formParams,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Places a savood on an offering
   *
   * @param offeringId The offering ID on which the savood should be placed.
   */
  public placeSavood(offeringId?: string): Observable<SuccessObject> {

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (offeringId !== undefined) {
      queryParameters = queryParameters.set('offeringId', <any>offeringId);
    }

    let headers = this.defaultHeaders;


    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.post<any>(`${this.basePath}/placeSavood`,
      null,
      {
        params: queryParameters,
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Update an offering
   *
   * @param id
   * @param body New parameters of the offering
   */
  public updateOfferingById(id: string, body: Offering): Observable<{}> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateOfferingById.');
    }
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling updateOfferingById.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];
    let httpContentTypeSelected:string = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.patch<any>(`${this.basePath}/offerings/${encodeURIComponent(String(id))}`,
      body,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Method to change OfferingLocation to Location Object
   * @param location
   * @returns {{latitude: number, longitude: number}}
   */
  changeOfferingLocationToLocation(location:OfferingLocation){
    if(location)
      return {latitude: location.coordinates[0], longitude: location.coordinates[1]};
    else return {latitude: 0, longitude:0}
  }

}
