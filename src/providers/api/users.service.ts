/**
 * Savood
 * denn nur lebendiges food tut gut
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';

import {Observable} from 'rxjs/Observable';
import '../rxjs-operators';

import {User} from '../../models/user';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';
import {env} from "../../environment/environment";


@Injectable()
export class UsersService {

  protected basePath = env.api_endpoint;
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (let consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Add a new user
   *
   * @param body User that needs to be added
   */
  public createNewUser(body: User): Observable<User> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling createNewUser.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];
    let httpContentTypeSelected: string = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.post<any>(`${this.basePath}/users`,
      body,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Delete a users
   *
   * @param id
   */
  public deleteUserById(id: string): Observable<{}> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deleteUserById.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    return this.httpClient.delete<any>(`${this.basePath}/users/${encodeURIComponent(String(id))}`,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Display a user
   *
   * @param id
   */
  public getUserById(id: string): Observable<User> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getUserById.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    return this.httpClient.get<any>(`${this.basePath}/users/${encodeURIComponent(String(id))}`,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Update a user
   *
   * @param id
   * @param body New parameters of the User
   */
  public updateUserById(id: string, body: User): Observable<{}> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateUserById.');
    }
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling updateUserById.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];
    let httpContentTypeSelected: string = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set("Content-Type", httpContentTypeSelected);
    }

    return this.httpClient.patch<any>(`${this.basePath}/users/${encodeURIComponent(String(id))}`,
      body,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Gets the avatar image.
   *
   * @param id
   * @param height If either width or height is set to 0, it will be set to an aspect ratio preserving value.
   * @param width If either width or height is set to 0, it will be set to an aspect ratio preserving value.
   */
  public usersIdBackgroundimageJpegGet(id: string, height?: number, width?: number): Observable<Blob> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling usersIdBackgroundimageJpegGet.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (height !== undefined) {
      queryParameters = queryParameters.set('height', <any>height);
    }
    if (width !== undefined) {
      queryParameters = queryParameters.set('width', <any>width);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'image/jpeg'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    return this.httpClient.get(`${this.basePath}/users/${encodeURIComponent(String(id))}/backgroundimage.jpeg`,
      {
        params: queryParameters,
        headers: headers,
        responseType: "blob",
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Uploads avatar image.
   *
   * @param id
   * @param upfile The file to upload.
   */
  public usersIdBackgroundimageJpegPost(id: string, upfile?: Blob): Observable<{}> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling usersIdBackgroundimageJpegPost.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'multipart/form-data'
    ];

    const canConsumeForm = this.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): void; };
    let convertFormParamsToString = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    let useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    }

    if (upfile !== undefined) {
      formParams = formParams.append('upfile', <any>upfile) || formParams;
    }

    return this.httpClient.post<any>(`${this.basePath}/users/${encodeURIComponent(String(id))}/backgroundimage.jpeg`,
      convertFormParamsToString ? formParams.toString() : formParams,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Gets the avatar image.
   *
   * @param id
   * @param height If either width or height is set to 0, it will be set to an aspect ratio preserving value.
   * @param width If either width or height is set to 0, it will be set to an aspect ratio preserving value.
   */
  public usersIdImageJpegGet(id: string, height?: number, width?: number): Observable<Blob> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling usersIdImageJpegGet.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (height !== undefined) {
      queryParameters = queryParameters.set('height', <any>height);
    }
    if (width !== undefined) {
      queryParameters = queryParameters.set('width', <any>width);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'image/jpeg'
    ];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    return this.httpClient.get(`${this.basePath}/users/${encodeURIComponent(String(id))}/image.jpeg`,
      {
        params: queryParameters,
        headers: headers,
        responseType: "blob",
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Uploads avatar image.
   *
   * @param id
   * @param upfile The file to upload.
   */
  public usersIdImageJpegPost(id: string, upfile?: Blob): Observable<{}> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling usersIdImageJpegPost.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'multipart/form-data'
    ];

    const canConsumeForm = this.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): void; };
    let convertFormParamsToString = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    let useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    }

    if (upfile !== undefined) {
      formParams = formParams.append('upfile', <any>upfile) || formParams;
    }

    return this.httpClient.post<any>(`${this.basePath}/users/${encodeURIComponent(String(id))}/image.jpeg`,
      convertFormParamsToString ? formParams.toString() : formParams,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

}
